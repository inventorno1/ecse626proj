Experiment 1. Input: 16 slices, 8 target concatenated with 8 condition. Output: 8 slices. Architecture: only 2 blocks. Timesteps: 128.
Experiment 2. Same as Experiment 1 but with 4 block architecture and double the timesteps.
Experiment 3. Same as Experiment 2 but with 16 output slices and loss only computed between first 8 of input and of output.
Experiment 4. Input: 2 slices, 1 target fixed as index 65 and 1 condition fixed as index 64. Output: 1 slice. Architecture: 5 blocks and changed crossattn to just attn. Timesteps: 256.
Experiment 5. Input: 16 slices, 8 target and 8 condition, with condition always being the 8 before target excpet when target is the top 8 slices. Output: 8 slices. Architecture: 5 blocks and changed crossattn to just attn. Timesteps: 256.

Experiment 6. Same as Experiment 5, but with slices_at_once=4.
Experiment 7. Change back to crossattn and add first target slice index as the embedding. Also change to normalise training between -1 and 1. Timesteps: 256. 
Experiment 8. Same as experiment 7, but now use nn.Embedding to learn how to embed the first target slice indices.
Experiment 9. Same as 8, but with slices_at_once=2.
Experiment 10. Same as Experiments 5 and 6, but with slices_at_once=2.
Experiment 11. Same as Experiment 10, but with normalise training between -1 and 1.

Ideas:
    Normalise training data to be between -1 and 1.
    Add cross-attn index to tell it which part of the brain to generate.
    When conditioning on nothing, make value = to -1.? Now if range is changed, perhaps keeping it as 0 is sensible (especially in conjunction with conditioning on indices).
    Change slices_at_once=2 and repeat.
    Crop the brain to remove background voxel slices at top and bottom.